#!/usr/bin/env bash
set -euo pipefail

SCRIPT_NAME="dev-shim-bootstrap"

log() {
  printf '[%s] %s\n' "${SCRIPT_NAME}" "$1"
}

warn() {
  printf '[%s][WARN] %s\n' "${SCRIPT_NAME}" "$1" >&2
}

fatal() {
  printf '[%s][ERROR] %s\n' "${SCRIPT_NAME}" "$1" >&2
  exit 1
}

usage() {
  cat <<'USAGE'
Substrate Dev Shim Bootstrap (Linux only)

Usage:
  dev-shim-bootstrap.sh --install [--bin <path>] [--prefix <path>]
  dev-shim-bootstrap.sh --uninstall [--bin <path>] [--prefix <path>]

Options:
  --install           Deploy dev shims using the specified substrate binary.
  --uninstall         Remove dev shims that were previously deployed.
  --bin <path>        Path to substrate executable (default: <repo>/target/debug/substrate).
  --prefix <path>     Base directory for shims (default: ~/.substrate).
  --dry-run           Print actions without executing them.
  -h, --help          Show this help message.
USAGE
}

ACTION=""
SUBSTRATE_BIN="${SUBSTRATE_DEV_BIN:-}"
PREFIX="${SUBSTRATE_DEV_PREFIX:-$HOME/.substrate}"
DRY_RUN=0

while [[ $# -gt 0 ]]; do
  case "$1" in
    --install)
      ACTION="install"
      shift
      ;;
    --uninstall)
      ACTION="uninstall"
      shift
      ;;
    --bin)
      [[ $# -ge 2 ]] || fatal "--bin requires a value"
      SUBSTRATE_BIN="$2"
      shift 2
      ;;
    --prefix)
      [[ $# -ge 2 ]] || fatal "--prefix requires a value"
      PREFIX="$2"
      shift 2
      ;;
    --dry-run)
      DRY_RUN=1
      shift
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *)
      fatal "Unknown argument: $1"
      ;;
  esac
done

[[ -n "${ACTION}" ]] || { usage; exit 1; }

if [[ "$(uname -s)" != "Linux" ]]; then
  fatal "This helper currently supports Linux only."
fi

REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"

if [[ -z "${SUBSTRATE_BIN}" ]]; then
  SUBSTRATE_BIN="${REPO_ROOT}/target/debug/substrate"
fi

SHIMS_DIR="${PREFIX%/}/shims"
ENV_FILE="${PREFIX%/}/dev-shim-env.sh"

run_substrate() {
  if [[ ${DRY_RUN} -eq 1 ]]; then
    printf '[%s][dry-run] substrate %s\n' "${SCRIPT_NAME}" "$*"
    return 0
  fi

  if [[ -x "${SUBSTRATE_BIN}" ]]; then
    SHIM_ORIGINAL_PATH="${PATH}" "${SUBSTRATE_BIN}" "$@"
    return $?
  fi

  if command -v substrate >/dev/null 2>&1; then
    SHIM_ORIGINAL_PATH="${PATH}" substrate "$@"
    return $?
  fi

  warn "substrate binary not found (expected ${SUBSTRATE_BIN}); skipping '$*'"
  return 1
}

write_env_file() {
  [[ ${DRY_RUN} -eq 1 ]] && return
  mkdir -p "${PREFIX}"
  cat >"${ENV_FILE}" <<ENV
# Generated by ${SCRIPT_NAME} on $(date -u +"%Y-%m-%dT%H:%M:%SZ")
# Source this file to enable Substrate dev shims for the current shell session.
if [[ ":\$PATH:" != *":${SHIMS_DIR}:"* ]]; then
  export PATH="${SHIMS_DIR}:\$PATH"
fi
ENV
  log "Wrote dev shim helper to ${ENV_FILE}"
}

remove_env_file() {
  [[ ${DRY_RUN} -eq 1 ]] && return
  if [[ -f "${ENV_FILE}" ]]; then
    rm -f "${ENV_FILE}"
    log "Removed ${ENV_FILE}"
  fi
}

ensure_bin_exists() {
  if [[ ${DRY_RUN} -eq 1 ]]; then
    return 0
  fi
  if [[ ! -x "${SUBSTRATE_BIN}" ]]; then
    warn "substrate binary not found at ${SUBSTRATE_BIN}; build it with 'cargo build -p substrate --bin substrate --bin substrate-shim' or pass --bin"
  fi
}

install_shims() {
  ensure_bin_exists
  mkdir -p "${SHIMS_DIR}"
  log "Deploying shims via ${SUBSTRATE_BIN}"
  if run_substrate --shim-deploy; then
    write_env_file
    cat <<MSG

Dev shims deployed to ${SHIMS_DIR}.
To activate them in this shell, run:
  source ${ENV_FILE}

MSG
  else
    warn "shim deployment reported an error"
  fi
}

uninstall_shims() {
  if run_substrate --shim-remove; then
    log "Removed shims via substrate CLI"
  else
    warn "Falling back to removing ${SHIMS_DIR} manually"
  fi

  if [[ ${DRY_RUN} -eq 0 && -d "${SHIMS_DIR}" ]]; then
    rm -rf "${SHIMS_DIR}"
    log "Deleted ${SHIMS_DIR}"
  fi

  remove_env_file
  cat <<MSG

Dev shims removed. Open a new shell or run 'hash -r' to clear command caches.

MSG
}

case "${ACTION}" in
  install)
    install_shims
    ;;
  uninstall)
    uninstall_shims
    ;;
  *)
    fatal "Unhandled action ${ACTION}"
    ;;
esac
