#!/usr/bin/env pwsh
[CmdletBinding()]
param(
    [string]$Prefix = (Join-Path $env:LOCALAPPDATA 'Substrate'),
    [ValidateSet('debug','release')][string]$Profile = 'debug',
    [switch]$NoShims
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function Write-Log {
    param([string]$Message)
    Write-Host "[substrate-dev-install] $Message"
}
function Write-Warn {
    param([string]$Message)
    Write-Host "[substrate-dev-install][WARN] $Message" -ForegroundColor Yellow
}
function Write-ErrorAndExit {
    param([string]$Message)
    Write-Host "[substrate-dev-install][ERROR] $Message" -ForegroundColor Red
    exit 1
}

if (-not (Get-Command cargo -ErrorAction SilentlyContinue)) {
    Write-ErrorAndExit 'cargo not found on PATH. Install the Rust toolchain before running this script.'
}

$repoRoot = (Resolve-Path (Join-Path $PSScriptRoot '..\..')).Path
Push-Location $repoRoot
try {
    $buildArgs = @('build', '--bin', 'substrate', '--bin', 'substrate-shim')
    if ($Profile -eq 'release') {
        $buildArgs += '--release'
    }

    Write-Log "Building Substrate ($Profile)..."
    & cargo @buildArgs

    $targetDir = if ($Profile -eq 'release') { 'release' } else { 'debug' }
    $substrateBin = Join-Path $repoRoot "target\$targetDir\substrate.exe"
    if (-not (Test-Path $substrateBin)) {
        Write-ErrorAndExit "Expected substrate binary at $substrateBin, but it was not found."
    }

    if (-not $NoShims.IsPresent) {
        $shimDir = Join-Path $Prefix 'shims'
        $profileScript = Join-Path $Prefix 'dev-substrate-profile.ps1'

        $originalPath = $env:PATH
        $previousShimOriginal = $env:SHIM_ORIGINAL_PATH
        try {
            Write-Log "Deploying shims via $substrateBin"
            $env:SUBSTRATE_ROOT = $Prefix
            if (-not $env:SHIM_ORIGINAL_PATH) {
                $env:SHIM_ORIGINAL_PATH = $originalPath
            }
            & $substrateBin --shim-deploy
        } finally {
            if ($null -ne $previousShimOriginal) {
                $env:SHIM_ORIGINAL_PATH = $previousShimOriginal
            } else {
                Remove-Item Env:SHIM_ORIGINAL_PATH -ErrorAction SilentlyContinue
            }
            Remove-Item Env:SUBSTRATE_ROOT -ErrorAction SilentlyContinue
            $env:PATH = $originalPath
        }

        New-Item -ItemType Directory -Force -Path $Prefix | Out-Null
        $timestamp = Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ'
        $profileContent = @"
# Generated by install-substrate-dev.ps1 on $timestamp
param()
`$env:SUBSTRATE_ROOT = '$Prefix'
if (-not `$env:SHIM_ORIGINAL_PATH) {
    `$env:SHIM_ORIGINAL_PATH = `$env:PATH
}
if (-not ((`$env:PATH -split ';') -contains '$shimDir')) {
    `$env:PATH = '$shimDir;' + `$env:PATH
}
"@
        Set-Content -Path $profileScript -Value $profileContent -Encoding UTF8
        Write-Log "Dev profile helper written to $profileScript"

        Write-Host ''
        Write-Host "Dev shims deployed to $shimDir."
        Write-Host "To enable them in this PowerShell session run:"
        Write-Host "  . `"$profileScript`""
        Write-Host ''
    } else {
        Write-Warn 'Shim deployment skipped (--NoShims).'
    }
}
finally {
    Pop-Location
}

Write-Log 'Substrate dev install complete.'
